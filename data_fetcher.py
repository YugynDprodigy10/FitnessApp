#############################################################################
# data_fetcher.py
#
# This file contains functions to fetch data needed for the app.
#
# You will re-write these functions in Unit 3, and are welcome to alter the
# data returned in the meantime. We will replace this file with other data when
# testing earlier units.
#############################################################################

import random
from google.cloud import bigquery
from datetime import datetime
import vertexai
from vertexai.preview.generative_models import GenerativeModel
import bcrypt

users = {
    'user1': {
        'full_name': 'Remi',
        'username': 'remi_the_rems',
        'date_of_birth': '1990-01-01',
        'profile_image': 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Puma_shoes.jpg',
        'friends': ['user2', 'user3', 'user4'],
    },
    'user2': {
        'full_name': 'Blake',
        'username': 'blake',
        'date_of_birth': '1990-01-01',
        'profile_image': 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Puma_shoes.jpg',
        'friends': ['user1'],
    },
    'user3': {
        'full_name': 'Jordan',
        'username': 'jordanjordanjordan',
        'date_of_birth': '1990-01-01',
        'profile_image': 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Puma_shoes.jpg',
        'friends': ['user1', 'user4'],
    },
    'user4': {
        'full_name': 'Gemmy',
        'username': 'gems',
        'date_of_birth': '1990-01-01',
        'profile_image': 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Puma_shoes.jpg',
        'friends': ['user1', 'user3'],
    },
}

# Generated by Gemini, modified by Alejandro: https://gemini.google.com/app/80dc4ea31e07a465
def get_user_sensor_data(username, workout_id):
    """Returns a list of timestamped information for a given workout.

    This function retrieves sensor data from the BigQuery database for a given user and workout.
    """

    client = bigquery.Client()
    sensor_data = []

    QUERY = f"SELECT s.SensorType, s.Timestamp, s.SensorValue, st.Units FROM `ise-lab-1.ISE.SensorData` s JOIN `ise-lab-1.ISE.SensorTypes` st ON s.SensorId = st.SensorId WHERE s.WorkoutId = '{workout_id}' "
    
    try:
        query_job = client.query(QUERY)  # API request
    except Exception as e:
        print(f"Error fetching sensor data: {e}")
        return []  # Return an empty list in case of an error
    
    rows = query_job.result()
    
    for row in rows:
        sensor_data.append({
            'sensor_type': row.SensorType,
            'timestamp': row.Timestamp,
            'data': row.SensorValue,
            'units': row.Units,
        })

    return sensor_data

# Mainly generated by Gemini, modified by Alejandro: https://gemini.google.com/app/80dc4ea31e07a465
def get_user_workouts(username):
    """Returns a list of user's workouts.

    This function retrieves workout data from the BigQuery database for a given user.
    """

    client = bigquery.Client()

    workouts = []
    USER_ID_QUERY = f"SELECT UserId FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}'"
    user_id = '0'
    for row in client.query(USER_ID_QUERY).result():
        user_id = row[0]
    

    QUERY = f"SELECT WorkoutId, StartTimestamp, EndTimestamp, StartLocationLat, StartLocationLong, EndLocationLat, EndLocationLong, TotalDistance, TotalSteps, CaloriesBurned FROM ise-lab-1.ISE.Workouts WHERE UserId = '{'user' + user_id}' "

    try:
        query_job = client.query(QUERY)  # API request
    except Exception as e:
        print(f"Error fetching workouts: {e}")  
        return []  # Return an empty list in case of an error
   
    rows = query_job.result()

    for row in rows:
        workout = {
            'workout_id': row.WorkoutId,
            'start_timestamp': row.StartTimestamp,
            'end_timestamp': row.EndTimestamp,
            'start_lat_lng': (row.StartLocationLat, row.StartLocationLong),
            'end_lat_lng': (row.EndLocationLat, row.EndLocationLong),
            'distance': row.TotalDistance,
            'steps': row.TotalSteps,
            'calories_burned': row.CaloriesBurned,
        }
        workouts.append(workout)

    return workouts


def get_user_profile(username):
    """Returns information about the given user.

    This function currently returns random data. You will re-write it in Unit 3.
    """
    client = bigquery.Client()

    post_list = []

    # Perform a query.
    QUERY = f"SELECT * FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}' LIMIT 100"

    try:
        query_job = client.query(QUERY)  # API request
    except:
        raise Exception("BigQuery Error")
    rows = query_job.result()

    for row in rows:
        user_dict = {
        'userID': row.UserId,
        'Name': row.Name,
        'Username': row.Username,
        'ImageUrl': row.ImageUrl,
        'DateOfBirth': row.DateOfBirth,
        }

    
    # Friend data is in another table. The following will append the friend data to the user profile
    Friends = []
    user_id = ''
    USER_ID_QUERY = f"SELECT UserId FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}'"
    for row in client.query(USER_ID_QUERY).result():
        user_id = row[0]
    FRIEND_QUERY = f"SELECT UserId2 FROM `ise-lab-1.ISE.Friends` WHERE UserId1 = '{'user' + user_id}' LIMIT 100"

    try:
        query_job2 = client.query(FRIEND_QUERY).result()
        for row in query_job2:
            Friends.append(row[0])
    except:
        raise Exception("BigQuery Error: Error getting Friend data")

    user_dict['Friends'] = Friends

    return user_dict


def get_user_posts(username):
    """Returns a list of a user's posts.

    Input: user ID

    Output: List containing a user's 100 most recent posts
    """
    client = bigquery.Client()
    user_id = ''
    USER_ID_QUERY = f"SELECT UserId FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}'"
    for row in client.query(USER_ID_QUERY).result():
        user_id = row[0]

    post_list = []

    # Perform a query.
    QUERY = f"SELECT * FROM `ise-lab-1.ISE.Posts` WHERE AuthorId = '{'user' + user_id}' LIMIT 100"
    
    try:
        query_job = client.query(QUERY)  # API request
        profile_job = client.query(f"SELECT Name, ImageUrl FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}' LIMIT 100")
    except:
        raise Exception("BigQuery Error")
    rows = query_job.result()
    for row in rows:
        post_dict = {}
        post_id = row.PostId
        user_id = row.AuthorId
        timestamp = row.Timestamp
        image = row.ImageUrl
        content = row.Content
        for item in profile_job:
            user_name = item.Name
            profile_picture = item.ImageUrl

        if post_id not in post_dict:
            post_dict['user_id'] = []
            post_dict['post_id'] = []
            post_dict['timestamp'] = []
            post_dict['image'] = []
            post_dict['content'] = []
            post_dict['user_name'] = []
            post_dict['profile_picture'] = []

            post_dict = {
            'post_id': row.PostId,
            'user_id': row.AuthorId,
            'timestamp': row.Timestamp,
            'image': row.ImageUrl,
            'content': row.Content,
            'user_name': user_name,
            'profile_picture': profile_picture
            }
            post_list.append(post_dict)
    
    return post_list


def get_genai_advice(username):
    """Generates motivational advice using Vertex AI's Gemini model."""
    # Fetch user info
    user = get_user_profile(username)

    # Vertex AI setup
    vertexai.init()
    model = GenerativeModel("gemini-2.0-flash")
    # Prompt to Gemini
    prompt = f"""
    Based on the user profile below, generate a short motivational workout tip (1â€“2 sentences).
    - Name: {user['Name']}
    - Username: {user['Username']}
    - Date of Birth: {user['DateOfBirth']}

    Keep it encouraging and friendly.
    """

    try:
        response = model.generate_content(prompt)
        content = response.text.strip()
    except Exception as e:
        print("[GENAI ERROR]", e)
        content = "You're doing great! Keep it up!"

    # Randomly choose an image or none
    image = random.choice([
        "https://images.unsplash.com/photo-1605296867304-46d5465a13f1",
        "https://images.unsplash.com/photo-1508672019048-805c876b67e2",
        None
    ])

    return {
        "advice_id": f"advice_{username}_{datetime.now().strftime('%Y%m%d%H%M%S')}",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "content": content,
        "image": image
    }

def post_user_stat(username, content):
    """Inserts a new post into the BigQuery Posts table."""
    client = bigquery.Client()
    table_id = "ise-lab-1.ISE.Posts"
    user_id = ''
    USER_ID_QUERY = f"SELECT UserId FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}'"
    for row in client.query(USER_ID_QUERY).result():
        user_id = row[0]

    row_to_insert = [{
        "AuthorId": user_id,
        "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "ImageUrl": None,
        "Content": content
    }]

    errors = client.insert_rows_json(table_id, row_to_insert)

    if errors:
        raise RuntimeError(f"Failed to insert post: {errors}")

def user_sign_up_function(name, username, password, image_url="https://static.vecteezy.com/system/resources/thumbnails/009/292/244/small/default-avatar-icon-of-social-media-user-vector.jpg", date_of_birth='1800-01-01'):
    
    USERNAME_COUNT_QUERY = f"SELECT COUNT(*) FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}'"
    client = bigquery.Client()
    query_job = client.query(USERNAME_COUNT_QUERY)
    result = query_job.result()
    for row in result:
        if row[0] >= 1:
            return 'Error: Username already in database. Please choose another username.'
    else:
        encrypted_password = encrypt_password(password)
        USER_ID_QUERY = f"SELECT userId FROM ise-lab-1.ISE.Users;"
        query_job = client.query(USER_ID_QUERY)
        result = query_job.result()
        max_id = 0
        for row in result:
            if int(row[0]) > max_id:
                max_id = int(row[0])
        
        USER_ADD_QUERY = f"INSERT INTO ise-lab-1.ISE.Users (userId, name, username, passwords, imageUrl, DateOfBirth) VALUES ('{max_id + 1}','{name}', '{username}', '{encrypted_password}' ,'{image_url}', '{date_of_birth}');"
        query_job = client.query(USER_ADD_QUERY)

        return 'User created!'

def user_sign_in_function(username, password):
    try:
        user_info = f"SELECT passwords FROM `ise-lab-1.ISE.Users` WHERE Username = '{username}'"
        client = bigquery.Client()
        query_job = client.query(user_info)
        result = query_job.result()
        for row in result:
            hashed_password = row[0]
        return verify_password(password, hashed_password)
    except:
        return False

def encrypt_password(password):
    hashed_bytes = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    return hashed_bytes.decode('utf-8')

def verify_password(password, hashed_password):
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))